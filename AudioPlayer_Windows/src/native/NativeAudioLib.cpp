// NativeAudioLib.cpp
#include <jni.h>
#include "audio_StdAudio.h"  // Header generated by javah

#include <Audioclient.h>
#include <Mmdeviceapi.h>
#include <Windows.h>

// WASAPI globals
IAudioClient* audioClient = nullptr;
IAudioRenderClient* renderClient = nullptr;

// Error handling utility (you might use more robust error checking in practice)
#define CHECK_HR(hr) if (FAILED(hr)) return;

// Initialize WASAPI
extern "C" JNIEXPORT void JNICALL Java_audio_StdAudio_configureAudio(JNIEnv* env, jobject obj, jint sampleRate, jint channels) {
    HRESULT hr;
    IMMDeviceEnumerator* deviceEnumerator = nullptr;
    IMMDevice* device = nullptr;

    // Initialize COM
    CoInitialize(nullptr);

    // Get the default audio endpoint
    hr = CoCreateInstance(__uuidof(MMDeviceEnumerator), nullptr, CLSCTX_ALL, IID_PPV_ARGS(&deviceEnumerator));
    CHECK_HR(hr);
    hr = deviceEnumerator->GetDefaultAudioEndpoint(eRender, eConsole, &device);
    CHECK_HR(hr);

    // Initialize the audio client
    hr = device->Activate(__uuidof(IAudioClient), CLSCTX_ALL, nullptr, (void**)&audioClient);
    CHECK_HR(hr);

    // Set up the audio format
    WAVEFORMATEX* waveFormat;
    hr = audioClient->GetMixFormat(&waveFormat);
    CHECK_HR(hr);
    waveFormat->nSamplesPerSec = sampleRate;
    waveFormat->nChannels = channels;
    
    hr = audioClient->Initialize(AUDCLNT_SHAREMODE_SHARED, 0, 10000000, 0, waveFormat, nullptr);
    CHECK_HR(hr);

    hr = audioClient->GetService(__uuidof(IAudioRenderClient), (void**)&renderClient);
    CHECK_HR(hr);

    // Start the audio stream
    hr = audioClient->Start();
    CHECK_HR(hr);

    device->Release();
    deviceEnumerator->Release();
}

// Play audio using WASAPI
extern "C" JNIEXPORT void JNICALL Java_audio_StdAudio_playAudio(JNIEnv* env, jobject obj, jbyteArray audioData) {
    // Convert jbyteArray to native byte array
    jbyte* data = env->GetByteArrayElements(audioData, nullptr);
    jsize length = env->GetArrayLength(audioData);

    UINT32 bufferFrameCount;
    audioClient->GetBufferSize(&bufferFrameCount);

    // Fill the audio buffer
    BYTE* buffer;
    renderClient->GetBuffer(bufferFrameCount, &buffer);
    memcpy(buffer, data, length);
    renderClient->ReleaseBuffer(bufferFrameCount, 0);

    // Clean up JNI references
    env->ReleaseByteArrayElements(audioData, data, 0);
}
