#include <jni.h>
#include "audio_StdAudio.h"  // Header generated by javah

#include <alsa/asoundlib.h>
#include <iostream>

// ALSA globals
snd_pcm_t* pcm_handle = nullptr;
snd_pcm_hw_params_t* params = nullptr;

// Error handling utility
#define CHECK_ERR(err) if (err < 0) { std::cerr << "ALSA error: " << snd_strerror(err) << std::endl; return; }

// Initialize ALSA
extern "C" JNIEXPORT void JNICALL Java_audio_StdAudio_configureAudio(JNIEnv* env, jobject obj, jint sampleRate, jint channels) {
    int err;

    // Open PCM device for playback
    if ((err = snd_pcm_open(&pcm_handle, "default", SND_PCM_STREAM_PLAYBACK, 0)) < 0) {
        std::cerr << "Unable to open PCM device: " << snd_strerror(err) << std::endl;
        return;
    }

    // Allocate hardware parameters object
    snd_pcm_hw_params_alloca(&params);

    // Fill in default values
    snd_pcm_hw_params_init(params);

    // Set desired hardware parameters
    snd_pcm_hw_params_set_access(pcm_handle, params, SND_PCM_ACCESS_RW_INTERLEAVED);
    snd_pcm_hw_params_set_format(pcm_handle, params, SND_PCM_FORMAT_S16_LE);
    snd_pcm_hw_params_set_rate_near(pcm_handle, params, &sampleRate, 0);
    snd_pcm_hw_params_set_channels(pcm_handle, params, channels);

    // Apply hardware parameters
    if ((err = snd_pcm_hw_params(pcm_handle, params)) < 0) {
        std::cerr << "Unable to set HW parameters: " << snd_strerror(err) << std::endl;
        return;
    }

    // Prepare the audio interface
    if ((err = snd_pcm_prepare(pcm_handle)) < 0) {
        std::cerr << "Unable to prepare PCM: " << snd_strerror(err) << std::endl;
        return;
    }
}

// Play audio using ALSA
extern "C" JNIEXPORT void JNICALL Java_audio_StdAudio_playAudio(JNIEnv* env, jobject obj, jbyteArray audioData) {
    // Convert jbyteArray to native byte array
    jbyte* data = env->GetByteArrayElements(audioData, nullptr);
    jsize length = env->GetArrayLength(audioData);

    // Write audio data to the ALSA output
    int err = snd_pcm_writei(pcm_handle, data, length / 2); // Divide by 2 for 16-bit samples
    if (err < 0) {
        std::cerr << "Error writing to PCM device: " << snd_strerror(err) << std::endl;
        // Prepare the interface again if there is an error
        snd_pcm_prepare(pcm_handle);
    }

    // Clean up JNI references
    env->ReleaseByteArrayElements(audioData, data, 0);
}

// Cleanup ALSA resources
extern "C" JNIEXPORT void JNICALL Java_audio_StdAudio_cleanupAudio(JNIEnv* env, jobject obj) {
    if (pcm_handle) {
        snd_pcm_drain(pcm_handle);
        snd_pcm_close(pcm_handle);
        pcm_handle = nullptr;
    }
}
